───────────────────────────────────────────────────────────────────────────────────────────
MVC 프레임워크 만들기
##### 프론트 컨트롤러 패턴 #####
-프론트 컨트롤러 패턴 도입 이전
  클라이언트가 공통로직이 필요할 경우에도 각 컨트롤러에 전부 구현해줬어야 한다.

-프론트 컨트롤러 패턴 도입 이후
  클라이언트가 요청이 들어오면 일단 프론트 컨트롤러에서 요청에 맞는 컨트롤러에 분배를 해준다.
  이때 공통 로직이 필요하다면 먼저 처리 후 분배를 해주면된다!(서블릿과 같은 중복 동작...)
  즉,여러개의 문을 가지고있어 관리가 안되던 입구를 하나로 줄여서 출입구를 만든 것과 같다!!!

-프론트 컨트롤러 패턴 특징
  * 프론트 컨트롤러 서블릿 하나로 클라이언트 요청을 받음
  * 프론트 컨트롤러가 요청에 맞는 컨트롤러를 찾아서 호출
  * 입구를 하나로 만드는 것과 같음
  * 공통 처리 가능
  * 프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 됨.

- 스프링 웹 MVC와 프론트 컨트롤러
  * 스프링 웹 MVC의 핵심이 바로 프론트컨트롤러(ForntController)
  * 스프링 웹 MVC의 DispatcherServlet이 FrontController 패턴으로 구현되어 있음.
───────────────────────────────────────────────────────────────────────────────────────────

##### 프론트 컨트롤러 도입하기 Ver.1 #####
1. 클라이언트가 HTTP 요청 (클라이언트 -> 서버)
2. FrontController에서 매핑정보(URL매핑 정보)로 알맞는 컨트롤러 조회
3. 해당 컨트롤러 호출
4. 해당 컨트롤러가 JSP forward (view) 응답
5. HTML 응답 (서버->클라이언트)

-서블릿과 비슷한 모양의 컨트롤러 인터페이스 도입.
 각 컨트롤러들은 이 인터페이스를 구현하면 된다.
 프론트 컨트롤러는 이 인터페이스를 호출해서 구현과 관계없이 로직의 일관성을 가져갈 수 있다.

%참고%
  리팩토링할때는 한가지씩 개선을 진행해야한다.(준위별로)
  예로 구조를 개선하려고 하면 구조만 개선을 한 후에 문제가 없다면 디테일한 부분들은 개선하는 것이 좋다.
  보통 큰lv부터 개선을 하는 것이 좋다.

-urlPatterns
  * urlPattern = "/front-controller/v1/*"
    : "front-controller/v1"을 포함한 모든 요청이 오면 이 서블릿에서 응답한다.(프론트컨트롤러)
    예) "/front-controller/v1", "front-controller/v1/a", "/front-controller/v1/a/b" 등등

-controllerMap (HashMap 사용)
  * key: 매핑 URL
  * value: 호출될 컨트롤러
  * 그 후 controllerMap.get("url")으로 알맞는 컨트롤러를 꺼내준다.

- service()
  * 먼저 "requestURI"를 조회해서 실제로 호출될 컨트롤러를 controllerMap에서 찾는다.
    만약 없다면 404(SC_NOT_FOUND) 상태 코드를 반환한다.
    만약 컨트롤러가 있다면 "controller.process(requset, response);"를 호출해 해당 컨트롤러를 실행한다.

