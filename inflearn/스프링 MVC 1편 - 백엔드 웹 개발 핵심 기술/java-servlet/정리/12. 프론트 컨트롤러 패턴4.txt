V4 등장 이유
- 프론트 컨트롤러 패턴3은 서블릿 종속성과 뷰경로의 중복을 제거한 잘 설계된 컨트롤러이다.
  하지만 개발자 입장에서 항상 ModelView객체를 생성하고 반환해야 하는 부분을 줄여 실용성을 높혀보자.

───────────────────────────────────────────────────────────────────────────────────────────
V4 구조
0. HTTP 요청 [클라이언트 -> FrontController]
1. 컨트롤러 조회 [FrontController의 매핑 정보]
2. 컨트롤러 호출(paramMap, model) [ -> Controller]
3. viewName 반환 [ -> FrontController]
4. viewResolver 호출 [ -> viewResolver]
5. MyView 반환 [ -> FrontController]
6. render(model) 호출 [ -> MyView]
7. HTML 응답 [ -> 클라이언트]

V3와 비슷하지만 컨트롤러가 ModelView를 반환하지 않고 ViewName을 반환한다.

───────────────────────────────────────────────────────────────────────────────────────────
#### ControllerV4 ####
- 인터페이스에 ModelView가 없음.
  model객체는 파라미터로 전달되기 떄문에 그냥 사용.
  결과로 뷰의 이름만 반환해주면 된다.

#### 모델 객체 전달 ####
- Map<String, Object> model = new Hash();
  : 모델 객체를 프론트 컨트롤러에서 생성해서 넘겨준다. 컨트롤러에서 모델 객체에 담을 수 있게 된다.
  (참조변수라 객체의 주소값을 전달하기 때문)

#### 뷰의 논리 이름을 직접 반환 ####
- 컨트롤러가 직접 뷰의 논리 이름을 반환하므로 이 값을 사용해서 실제 물리 뷰를 찾을 수 있다.
───────────────────────────────────────────────────────────────────────────────────────────
>>정리
기존 구조에서 모델을 파라미터로 넘기고, 뷰의 논리 이름을 반환한다는 작은 아이디어를 적용한것.
컨트롤러를 구현하는 개발자 입장에서는 더욱 편해졌다.
이 버전까지 한번에 도착한게 아닌 프레임워크가 점진적으로 발전하는 과정에서 이런 방법도 찾을수 있었다.

결국 프레임워크나 공통 기능이 수고스러워야 개발자가 편리해진다!

