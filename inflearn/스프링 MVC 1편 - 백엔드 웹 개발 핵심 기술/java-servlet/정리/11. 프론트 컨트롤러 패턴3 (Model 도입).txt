Model추가
- 서블릿 종속성 제거
  컨트롤러 입장에서 HttpServletRequest, HttpServletResponse가 필요없는 경우에도 스펙상 무조건 받아야 한다.
  요청 파라미터 정보는 자바의 Map으로 대신 넘기도록 하면 지금 구조에서는 컨트롤러가 서블릿 기술을 몰라도 동작할 수 있다.
  그리고 request객체를 Model로 사용하는 대신에 별도의 Model객체를 만들어서 반환하면 된다.
  우리가 구현하는 컨트롤러가 서블릿 기술을 전혀 사용하지 않도록 변경하자.
  ->컨트롤러가 서블릿 구조를 몰라도 되기떄문에 테스트,유지보수가 쉬워진다!!!

- 뷰 이름 중복 제거
  컨트롤러에서 지정하는 뷰 이름에 중복이 있는 것을 확인할 수 있다.
  컨트롤러는 "뷰의 논리 이름"을 반환하고, 실제 물리 위치의 이름은 프론트 컨트롤러에서 처리하도록 단순화.
  -> 뷰의 폴더 위치가 함께 이동해도 프론트 컨트롤러만 수정하면 된다.

- url 논리주소
  * /WEB-INF/views/new-form.jsp: 'new-form'
  * /WEB-INF/views/save-result.jsp: 'save-result'
  * /WEB-INF/views/members.jsp: 'members'

-구조
0. HTTP 요청 [클라이언트 -> FrontController]
1. 컨트롤러 조회 [FrontController 매핑정보]
2. 컨트롤러 호출 [FrontController -> Controller]
3. ModelView 반환 [Controller -> FrontController]
4. viewResolver 호출 [FrontController -> viewResolver]
5. MyView 반환 [viewResolver -> FrontController]
6. render(model) 호출 [FrontController -> MyView]
7. HTML 응답 [MyView -> 클라이언트]

───────────────────────────────────────────────────────────────────────────────────────────
#### ModelView 객체####
- 서블릿의 종속성을 제거하기 위해서 Model + View의 이름까지 전달하는 객체
  (HttpServletRequest를 사용하지 않음 -> request.setAttribute() 사용 불가능함.
   따라서 Model을 별도로 생성함.)
  %참고: ModelView 객체는 패키지 frontcontroller에 둔다.

- 뷰의 이름과 뷰를 렌더링할 때 필요한 model 객체를 가지고 있따.
  model은 단순히 map으로 되어 있으므로 컨트롤러에서 뷰에 필요한 데이터를 key, value로 넣어주면 된다.

#### ControllerV3 ####
- 서블릿을 전혀 사용하지 않아 구현이 단순해지고 테스트하기 쉬워졌다.
  HttpServletRequest가 제공하는 파라미터는 프론트 컨트롤러가 paramMap에 담아서 호출
  응답 결과로 뷰 이름과 뷰에 전달할 Model 데이터를 포함하는 ModelView객체를 반환

#### MemberFormControllerV3 (회원 등록 폼화면) ####
- ModelView를 생성할 때 new-form이라는 view의 논리적인 이름을 지정한다.
  실제 물리적인 이름은 프론트 컨트롤러에서 처리한다.

#### MemberSaveControllerV3 (회원 저장) ####
- paramMap.get("username");
  : 파라미터 정보는 map에 담겨있어 필요한 요청 파라미터를 꺼내면 된다.
- mv.getModel().put("member", member);
  : 모델은 단순한 map이므로 모델에 뷰에서 필요한 'member'객체를 담고 반환한다.

#### FrontControllerV3 ####
- view.render(mv.getModel(), request, response)
  : 해당 코드는 mv.getModel()을 추가로 필요하기 때문에 메서드 오버로딩이 필요하다.

- createParamMap()
  : HttpSevletRequest에서 파라미터 정보를 꺼내서 Map으로 반환.
    그리고 해당 Map('paramMap')을 컨트롤러에 전달하면서 호출.

#### ViewResolver ####
- MyView view = viewResolver(viewName);
  컨트롤러가 반환한 논리 뷰 이름을 실제 물리 뷰 경로로 변경한다.
  그리고 실제 물리 경로가 있는 MvView객체를 반환한다.
  ex) 논리 뷰 이름: members
      물리 뷰 경로: /WEB-INF/views/members.jsp

  * view.render(mv.getModel(), request, response)
    > 뷰 객체를 통해서 HTML화면을 렌더링 한다.
    > 뷰 객체의 render()는 모델 정보도 함께 받는다.
    > JSP는 request.getAttribute()로 데이터를 조회.
      모델의 데이터를 꺼내서 request.setAtrribute()로 담아둔다.
    > JSP로 포워드 해서 JSP를 렌더링 한다.


