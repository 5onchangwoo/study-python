#### 템플릿 엔진 ####
동적인 HTML문서를 만드는것은 매우 불편하고 반복적인 작업이 필요하다.
해당 부분을 반대로 HTML에서 동적으로 작동할 수 있도록 만들면 더 편리하다.
이러한 기능을 할 수 있게 해주는 것이 바로 템플릿엔진이다.
템플릿 엔진을 사용하면 HTML문서에서 필요한 곳만 코드를 적용해 동적으로 변경할 수 있다.
템플릿 엔진에는 JSP, Thymeleaf, Freemarker, Velocity등이 있다.
%참고%
    JSP는 성능과 기능면에서 다른 템플릿 엔진에 비해 경쟁력이 부족하다.
    최근에는 스프링과 잘 통합되어 있는 Thymeleaf를 사용한다.


#### JSP ####
JSP를 사용하려면 먼저 라이브러리를 추가해야 한다.
build.gradle의 dependencies부분에 아래 내용을 추가해주자.
//JSP 추가 시작
implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
implementation 'javax.servlet:jstl'
//JSP 추가 끝

JSP를 사용하기 위해서는 확장자가 .jsp로 만들어 주어야 한다.
- jsp파일 맨위에
  <%@ page contentType="text/html;charset=UTF-8" language="java" %>
  를 삽입해주어야 한다.

- <% ~~ %> 사이에 자바 코드를 사용할 수 있다.
- <%= ~~ %> 사이에 있는 자바코드는 그대로 출력한다.

- 자바 클래스 import가 가능하다. 페이지 상단에
  <%@ page import="클래스 경로" %>
  와 같이 삽입해주면 된다. (자바의 import문과 동일한 기능)
  ex) <%@ page import="hello.servlet.domain.member.Member" %>

- response, request, out과 같은 일반적인 변수는 서블릿과 동일하게 사용 가능하다.

#서블릿과 JSP의 한계
 서블릿으로 개발할때는 뷰(View)화면을 위한 HTML을 만드는 작업이 자바 코드에 섞여서 보기않좋다.
 JSP를 사용한 덕분에 뷰를 생성하는 HTML 작업을 좀더 깔끔하게 만들고
 중간중간 동적으로 변경이 필요한 부분에만 자바 코드를 적용했다.

 하지만
 회원 저장 JSP를 보자. 코드의 상위 절반은 회원을 저장하기 위한 비즈니스 로직,
 나머지 하위 절반만 결과를 HTML로 보여주기 위한 뷰 영역이다.
 회원 목록의 경우에도 마찬가지다.
 코드를 잘보면, JAVA코드, 데이터를 조회하는 리포지토리 등등 다양한 코드를 모두
 JSP에 노출되어 있다. JSP가 너무 많은 역할을 한다.
 JSP의 덩치가 매우 커져 수백 수천줄을 넘어가는 순간 지옥이 시작될 것이다.

 해당 부분들의 문제들을 해결하기 위해서 MVC패턴이 등장하였다.
 비즈니스 로직은 서블릿처럼 다른곳에서 처리하고,
 JSP는 목적에 맞게 HTML로 화면(View)을 그리는 일에만 집중하도록 하자.
