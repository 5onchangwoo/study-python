모든 컨트롤러에서 뷰로 이동하는 부분에 중복이 있고, 깔끔하지 않음

따라서 중복되는 부분을 "MyView" 객체로 만들어 처리함.
그에따른 처리 과정은 이러하게 변한다.
0. HTTP 요청 [클라이언트 -> Front Controller]
    - /front-controller/v2/* 즉, v2하위 url 호출시 무조건 작동
    (FrontController 패턴)
1. URL 매핑 정보에서 컨트롤러 조회 [Front Controller -> 매핑 정보]
    - FrontController에서 HashMap에 저장된 url을 통해 컨트롤러 객체 조회
2. 컨트롤러 호출 [Front Controller -> Controller]
    - FrontController.Service()에서 해당 컨트롤러 호출
3. MyView 반환 [Controller -> Front Controller]
    - 호출한 컨트롤러에서 MyView객체로 반환
4. render() 호출 [Front Controller -> MyView]
    - 반환된 MyView객체로 render()실행(Dispatcher)
5. JSP forward [MyView -> JSP]
    - dispatcher.render(request, response)로 JSP 포워딩을 수행
6. HTML 응답 [JSP -> 클라이언트]
    - 클라이언트에게 응답 완료.
───────────────────────────────────────────────────────────────────────────────────────────
ControllerV2의 반환 타입이 MyView이므로 프론트 컨트롤러는 컨트롤러의 호출 결과로 MyView를 반환받는다.
그리고 View.render()를 호출하면 forward로직을 수행해서 JSP가 실행함.

프론트 컨트롤러의 도입으로 MyView 객체의 render()를 호출하는 부분을 모두 일관되게 처리할 수 있다.
각각의 컨트롤러는 MyView객체를 생성만 해서 반환하면 된다.
물론 MyView도 다형성을 지키기 위해서는 인터페이스로 구현하면 유연함을 가질 수 있다!!
