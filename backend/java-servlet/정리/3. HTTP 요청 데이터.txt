HTTP 요청 데이터

# HTTP 요청 메시지를 통해 클라이언트에서 서버로 데이터를 전달하는 방법
주로 3가지 방법을 사용한다.
1. GET - 쿼리 파라미터
    * /url?username=hello&age=20
    * 예) 검색, 필터, 페이징 등에서 많이 사용
2. POST - HTML Form
    * content-type: application/x-www-form-urlencoded
    * 메시지 바디에 쿼리 파라미터 형식으로 전달 username=hello&age=20
    * 예) 회원가입, 상품 주문, HTML Form 사용
3. HTTP message body - 데이터 직접 요청
    * HTTP API에서 주로 사용 (JSON, XML, TEXT)
    * 데이터 형식은 주로 JSON 사용
    * POST, PUT, PATCH


######## 1. HTTP 요청 데이터 - GET 쿼리 파라미터 ########
- 클라이언트 -> 서버
(전달 데이터: username=hello, age=20)
>> http:localhost:8080/request-param?username=hello&age=20

- 서버에서는 HttpServletRequest가 제공하는 메서드를 통해 쿼리 파라미터를 편리하게 조회할 수 있다.
String request.getParameter("name"); - 단일 파라미터 값 조회
Enumeration<String> request.getParameterNames(); - 모든 파라미터 이름 조회
Map<String, String[]> request.getParameterMap(); - 파라미터를 Map으로 조회
String[] request.getParameterValues("name"); - 같은 이름의 복수 파라미터 값 조회

- 복수 파라미터에서 단일 파라미터 조회
username=hello&username=kim처럼 파라미터 이름은 하나인데 값이 중복일 경우
- request.getParameter()는 하나의 파라미터 이름에 대해서 단 하나의 값일때 사용할 수 있다.
    (중복일 경우 첫번째에 위치한 값을 반환한다.)
- 해당 내용처럼 하나의 이름에 대해서 복수의 값이 올경우
    request.getParameterValues()를 사용해야 한다.

######## 2. HTTP 요청 데이터 - POST HTML Form ########
- 특징:
    * Content-type: application/x-www-form-urlencoded
    * 메시지 바디에 쿼리 파라미터과 동일한 형식으로 데이터를 전달한다.
      (ex. username=hello&age=20)
    * 예) 회원가입, 상품 주문, HTML Form 사용
- application/x-www-form-urlencoded 형식은 GET에서 살펴본 쿼리 파라미터 형식과 같음.
 >>> 따라서 쿼리 파라미터 조회 메서드를 그대로 사용하면 된다.
 (클라이언트 입장에서는 두 방식에 차이가 있지만, 서버 입장에서는 둘의 형식이 동일)
 request.getParameter()로 편리하게 구분없이 조회 가능.

%참고%
    Content-type은 HTTP메시지 바디의 데이터 형식을 지정함.
    GET URL 쿼리파라미터 형식 -> HTTP메시지 바디를 사용하지 않음
    --> content-type이 없음.
    POST HTML Form 형식 -> HTTP 메시지 바디에 데이터를 포함해서 보냄
    --> content-type을 꼭 지정해야 함. (application/x-www-form-urlencoded)

이를 간단하게 요청파라미터라고 하기도 함.
POSTMAN으로 간단하게 테스트를 하는 방법도 있다.
    !!주의!!
    Body -> x-www-form-urlencoded 선택 후
    Header 탭에 들어가 content-type: 'applicaion/x-www-urlencoded' 확인!
    !!!!!!!


######## 3. HTTP 요청 데이터 - API 메시지 바디 ########
--------(단순 텍스트)--------
- HTTP message body에 데이터를 직접 담아서 요청
    * HTTP API에서 주로 사용, JSON, XML, TEXT
    * 데이터 형식은 주로 JSON 사용
    * POST, PUT, PATCH에서 주로 사용

%참고%
    inputStream은 byte코드를 반환한다.
    "StreamUtils.copyToString(변수명, StandardCharsets.UTF_8);"
    를 사용해서 문자로 변환해 주어야 한다.
    UTF-8을 주로 사용한다.

--------(JSON 형식 전송송)-------
POST http://localhost:8080/request-body-json
content-type: "application/json"
message body: {"username": "hello", "age": 20}
결과: messageBody = {"username": "hello", "age": 20}

#JSON형식 파싱하는 객체가 필요함.
또한 Jackson, Gson같은 JSON변환 라이브러리를 통해서 사용해야 한다.
스프링 부트로 Spring MVC를 선택시 Jackson라이브러리 ObjectMapper를 제공한다.

HTML form데이터도 메시지 바디를 통해 전송되므로 직접 읽을 수 있다.
하지만 파라미터 조회기능 "request.getParameter(...)"를 이미 제공한다.
>> 편리하게 조회기능을 사용하면 된다.