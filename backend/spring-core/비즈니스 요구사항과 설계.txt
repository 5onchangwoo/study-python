회원
1. 회원을 가입하고 조회
2. 회원은 일반, VIP 두 가지 등급
3. 회원 데이터는 자체 DB를 구축할 수도 외부 시스템과 연동할 수 있다.(미확정)

주문과 할인 정책
1. 회원은 상품 주문 가능
2. 회원 등급에 따라 할인 정책 적용
3. 모든 VIP는 1,000원을 할인해주는 고정 금액 할인(나중에 변경될 수 있음)
4. 할인 정책은 변경 가능성이 높다. 회사의 기본 할인 정책을 아직 정하지 못했고,
오픈 직전까지 고민을 미루고 싶다. 최악의 경우에는 할인을 적용하지 않을 수도 있다.(미확정)

회원데이터, 할인 정책 같은 부분은 지금 결정하기 어려운 부분.
하지만 이런 정책이 결정될 때 까지 개발을 무기한 기다릴 수도 없다.

그러므로 인터페이스를 만들고 구현체를 언제든지 갈아끼울 수 있도록 설계하자.


설계>>
--회원 도메인 협력 관계
클라이언트 --> 회원 서비스(회원가입, 회원조회) --> 회원 저장소(메모리, DB, 외부시스템 연동)

*회원 클래스 다이어그램
MemberServiceImpl -->MemberService(interface)
    └──>MemberRepository(interface) ---> "MemoryMemberRepository" or "DbMemberRepository"

//회원 서비스 : MemberServiceImpl

*회원 객체 다이어그램
클라이언트 ─> 회원서비스 ─> 메모리 회원 저장소

---------------------------------------------
--주문 도메인 협력, 역할, 책임
1.주문 생성(클라이언트 -> 주문 서비스 역할)
- 회원ID
- 상품명
- 상품 가격
2.회원 조회(주문 서비스 역할 -> 회원 저장소 역할)
3.할인 적용(주문 서비스 역할 -> 할인 정책 역할)
4.주문 결과 반환(주문 서비스 역할 -> 클라이언트)
그 후 역할에 해당하는 구현체를 구현.
****

---------------------------------------------
새로운 할인 정책 개발
할인 정책을 1000원 고정 할인에서 10%할인 정책으로 변경하려고 한다.
